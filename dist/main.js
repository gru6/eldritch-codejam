/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* import { cardsData as GreenCardsDate } from './data/mythicCards/green/index'\r\nimport { cardsData as BrownCardsDate } from './data/mythicCards/brown/index'\r\nimport { cardsData as BlueCardsDate } from './data/mythicCards/blue/index' */\nvar body = document.querySelector('body');\nvar AllAncientCard = document.querySelectorAll('.ancient-card');\nvar AncientCard = document.querySelector('.ancient-card');\nvar AllDifficulty = document.querySelectorAll('.difficulty');\nvar difficultyCard = document.querySelector('.difficulty');\nvar currentState = document.querySelector('.current-state');\nvar deck = document.querySelector('.deck');\nvar lastCard = document.querySelector('.last-card');\nvar shaffle = document.querySelector('.shaffle'); //chose Anciend card\n\nbody.addEventListener('click', function (e) {\n  var event = e.target;\n\n  if (event.classList.contains('ancient-card')) {\n    for (var i = 0; i < AllAncientCard.length; i++) {\n      AllAncientCard[i].classList.remove('active');\n    }\n\n    event.classList.add('active');\n  }\n}); //chose difficulty\n\nbody.addEventListener('click', function (e) {\n  var event = e.target;\n\n  if (event.classList.contains('difficulty')) {\n    for (var i = 0; i < AllDifficulty.length; i++) {\n      AllDifficulty[i].classList.remove('active-btn');\n    }\n\n    event.classList.add('active-btn');\n  }\n});\nshaffle.addEventListener('click', function (e) {\n  shaffle.classList.add('hidden');\n  currentState.classList.remove('hidden');\n  deck.classList.remove('hidden');\n  lastCard.classList.remove('hidden');\n}); //берем все green(brown, blue)  и выбираем из них 5(9, 2) easy if easy закончились то normal\n//выбрать карты для каждого этапа и смешать их(получится 3 колоды разных цветов и сложности)\n//положить 1 колоду сверху под нее 2 этап и под них 3 этап\n\nvar allCardsData = [].concat(_toConsumableArray(GreenCardsDate), _toConsumableArray(BrownCardsDate), _toConsumableArray(BlueCardsDate)); //all green cards как получить?\n\nvar SubDeck1 = [];\nvar SubDeck2 = [];\nvar SubDeck3 = []; // массив объектов green(brown, blue) easy (normal, hard) карт\n\nvar greenEasy = allCardsData.filter(function (card) {\n  return card.difficulty === 'easy' && card.color === 'green';\n});\nvar brownEasy = allCardsData.filter(function (card) {\n  return card.difficulty === 'easy' && card.color === 'brown';\n});\nvar blueEasy = allCardsData.filter(function (card) {\n  return card.difficulty === 'easy' && card.color === 'blue';\n});\nvar greenNormal = allCardsData.filter(function (card) {\n  return card.difficulty === 'normal' && card.color === 'green';\n});\nvar brownNormal = allCardsData.filter(function (card) {\n  return card.difficulty === 'normal' && card.color === 'brown';\n});\nvar blueNormal = allCardsData.filter(function (card) {\n  return card.difficulty === 'normal' && card.color === 'blue';\n});\nvar greenHard = allCardsData.filter(function (card) {\n  return card.difficulty === 'hard' && card.color === 'green';\n});\nvar brownHard = allCardsData.filter(function (card) {\n  return card.difficulty === 'hard' && card.color === 'brown';\n});\nvar blueHard = allCardsData.filter(function (card) {\n  return card.difficulty === 'hard' && card.color === 'blue';\n}); //make AzathothCardsData\n\nvar AzathothGreen = 5;\nvar AzathothBrown = 9;\nvar AzathothBlue = 2;\nvar AzathothAllCards = []; //собераем колоду для Азатота\n// veryeasy for AzathothGreen\n\nwhile (AzathothGreen) {\n  for (var i = 0; i < greenEasy.length; i++) {\n    AzathothAllCards.push(greenEasy[i]);\n    AzathothGreen = AzathothGreen - 1;\n  }\n\n  if (AzathothGreen > 0) {\n    for (var j = 0; j < greenNormal.length; j++) {\n      SubDeck1.push(greenNormal[j]);\n      AzathothGreen = AzathothGreen - 1;\n    }\n  }\n} // veryeasy for AzathothBrown\n\n\nwhile (AzathothBrown) {\n  for (var _i = 0; _i < brownEasy.length; _i++) {\n    AzathothAllCards.push(brownEasy[_i]);\n    AzathothBrown = AzathothBrown - 1;\n  }\n\n  if (AzathothBrown > 0) {\n    for (var _j = 0; _j < brownNormal.length; _j++) {\n      AzathothAllCards.push(brownNormal[_j]);\n      AzathothBrown = AzathothBrown - 1;\n    }\n  }\n} // veryeasy for AzathothBlue\n\n\nwhile (AzathothBlue) {\n  for (var _i2 = 0; _i2 < blueEasy.length; _i2++) {\n    AzathothAllCards.push(blueEasy[_i2]);\n    AzathothBlue = AzathothBlue - 1;\n  }\n\n  if (AzathothBlue > 0) {\n    for (var _j2 = 0; _j2 < blueNormal.length; _j2++) {\n      AzathothAllCards.push(blueNormal[_j2]);\n      AzathothBlue = AzathothBlue - 1;\n    }\n  }\n}\n/* \r\n//very easy constructor\r\nfunction (name, ) {\r\n\r\n  while (HeroGreen) {\r\n    for (let i = 0; i < greenEasy.length; i++) {\r\n      AzathothAllCards.push(greenEasy[i]);\r\n      AzathothGreen = AzathothGreen - 1;\r\n    }\r\n    if (AzathothGreen > 0) {\r\n      for (let j = 0; j < greenNormal.length; j++) {\r\n        SubDeck1.push(greenNormal[j]);\r\n        AzathothGreen = AzathothGreen - 1;\r\n      }\r\n    }\r\n  }\r\n} */\n\n/* function shuffle(array) {\r\n  array.sort(() => Math.random() - 0.5);\r\n} */\n\n//# sourceURL=webpack://my-webpack-project/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;